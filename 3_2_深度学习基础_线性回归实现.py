# -*- coding: utf-8 -*-
"""3.2 深度学习基础-线性回归实现.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aSl_p5Xr-t1C0kXt1IvC0mn2Pu064Gpj
"""



from mxnet import nd
from time import time

a = nd.ones(shape=1024)
b = nd.ones(shape=1024)

start = time()
c = nd.zeros(shape=1024)
for i in range(1024):
  c = a[i] + b[i]
time()-start

start = time()
d = a + b
time() - start

"""### 3.2 线性回归从零开始实现"""

# %matplotlib inline
from IPython import display
from matplotlib import pyplot as plt
from mxnet import autograd, nd
import random

"""#### 3.21 生成数据集"""

num_inputs = 2
num_examples = 1000
true_w = [2,-3.4]
true_b = 4.2
features = nd.random.normal(scale=1, shape=(num_examples,num_inputs))
labels = true_w[0] * features[:,0] + true_w[1] * features[:,1] + true_b
labels += nd.random.normal(scale=0.01,shape=labels.shape)

features[0],labels[0]

def use_svg_display():
  # 用矢量图显示
  display.set_matplotlib_formats('svg')
  
def set_figsize(figsize=(3.5, 2.5)):
  use_svg_display()
  # 设置图的尺寸
  plt.rcParams['figure.figsize'] = figsize
    
set_figsize()
plt.scatter(features[:,1].asnumpy(),labels.asnumpy(),1)

"""#### 3.22 读取数据集"""

def data_iter(batch_size,features,labels):
  """
  indices: []
  j : []
  """
  num_examples = len(features)
  indices = list(range(num_examples))
  random.shuffle(indices)
  for i in range(0, num_examples, batch_size):
    j = nd.array(indices[i : min(i + batch_size, num_examples)])
    yield features.take(j), labels.take(j) # take 函数根据索引返回对应元素

batch_size = 10
for X , y in data_iter(batch_size, features, labels):
  print(X, y)
  break

"""#### 3.2.3  初始化模型参数"""

w = nd.random.normal(scale=0.01,shape=(num_inputs,1))
b = nd.zeros(shape=(1,))

w.attach_grad()
b.attach_grad()

"""#### 3.2.4 定义模型"""

def linreg(X, w, b):
  return nd.dot(X, w) + b

"""#### 3.2.5 定义损失函数"""

def squared_loss(y_hat, y):
  return (y_hat - y.reshape(y_hat.shape)) ** 2 / 2

"""#### 3.2.6 定义优化函数"""

def sgd(params, lr, batch_size):
  for param in params:
    param[:] = param - lr * param.grad / batch_size

"""#### 3.2.7 模型训练"""

lr = 0.03
num_ecochs = 5
net = linreg
loss = squared_loss

for epoch in range(num_ecochs):
  for X, y in data_iter(batch_size, features, labels):
    with autograd.record():
      l = loss(net(X, w, b), y)
    l.backward()
    sgd([w, b], lr, batch_size)
  train_l = loss(net(features, w, b), labels)
  print('epoch %d, loss %f' % (epoch + 1, train_l.mean().asnumpy()))

true_w, w

true_b,b

"""### 3.3 线性回归的简洁实现"""



"""#### 3.3.1 生成数据集"""

from mxnet import autograd, nd

num_inputs = 2
num_features = 1000
true_w = [2, -3.4]
true_b = 4.2
features = nd.random.normal(scale=1,shape=(num_features,num_inputs))
labels = true_w[0] * features[:,0] + true_w[1] * features[:,1] + true_b
labels += nd.random.normal(scale=0.01, shape=labels.shape)

"""#### 3.3.2 读取数据集"""

from mxnet.gluon import data as gdata

batch_size = 10
dataset = gdata.ArrayDataset(features,labels)
data_iter = gdata.DataLoader(dataset,batch_size,shuffle=True)

for X, y in data_iter:
  print(X, y)
  break

"""#### 3.3.3 定义模型"""

from mxnet.gluon import nn

net = nn.Sequential()
net.add(nn.Dense(1))

"""#### 3.3.4 初始化模型参数"""

from mxnet import init

net.initialize(init.Normal(sigma=0.01))

"""#### 3.3.5 定义损失函数"""

from mxnet.gluon import loss as gloss

loss = gloss.L2Loss()

"""#### 3.3.6 定义优化算法"""

from mxnet import gluon

trainer = gluon.Trainer(net.collect_params(),'sgd',{'learning_rate': 0.03})

"""#### 3.3.7 训练模型"""

num_epochs = 3

for epoch in range(1,num_epochs + 1):
  for X, y in data_iter:
    with autograd.record():
      l = loss(net(X), y)
    l.backward()
    trainer.step(batch_size)
  l = loss(net(features), labels)
  print('epoch: %d loss : %f' % (epoch, l.mean().asnumpy()))

"""#### 3.3.8 模型对比"""

dense = net[0]
true_w, dense.weight.data()

true_b, dense.bias.data()



